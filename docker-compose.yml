version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ${SERVICE_NAME:-order-service}-postgres-${ASPNETCORE_ENVIRONMENT:-Development}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-OrderServiceDb_Dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres_dev_pass}
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --locale=C'
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-OrderServiceDb_Dev}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - order-network

  order-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${SERVICE_NAME:-order-service}-${ASPNETCORE_ENVIRONMENT:-Development}
    restart: unless-stopped
    ports:
      - '${SERVICE_PORT:-3005}:80'
      - '${SERVICE_HTTPS_PORT:-3006}:443'
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${DB_NAME:-OrderServiceDb_Dev};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-postgres_dev_pass};Port=5432
      - RabbitMQ__ConnectionString=${RABBITMQ_CONNECTION_STRING:-amqp://admin:admin123@host.docker.internal:5672/}
      - JWT__Secret=${JWT_SECRET:-order-service-jwt-secret-development}
      - JWT__Issuer=${JWT_ISSUER:-aioutlet-auth-service}
      - JWT__Audience=${JWT_AUDIENCE:-aioutlet-order-service}
      - ServiceDiscovery__UserServiceUrl=${USER_SERVICE_URL:-http://host.docker.internal:3002}
      - ServiceDiscovery__PaymentServiceUrl=${PAYMENT_SERVICE_URL:-http://host.docker.internal:7000}
      - ServiceDiscovery__InventoryServiceUrl=${INVENTORY_SERVICE_URL:-http://host.docker.internal:3004}
      - ServiceDiscovery__NotificationServiceUrl=${NOTIFICATION_SERVICE_URL:-http://host.docker.internal:3008}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - order-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  order-network:
    driver: bridge
