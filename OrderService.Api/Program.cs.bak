using Microsoft.EntityFrameworkCore;var builder = WebApplication.CreateBuilder(args);

using Microsoft.AspNetCore.Authentication.JwtBearer;

using Microsoft.AspNetCore.RateLimiting;// Add services to the container.

using Microsoft.IdentityModel.Tokens;// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle

using Microsoft.OpenApi.Models;builder.Services.AddEndpointsApiExplorer();

using System.Text;builder.Services.AddSwaggerGen();

using FluentValidation;

using OrderService.Core.Data;var app = builder.Build();

using OrderService.Core.Configuration;

using OrderService.Core.Repositories;// Configure the HTTP request pipeline.

using OrderService.Core.Services;if (app.Environment.IsDevelopment())

using OrderService.Core.Services.Messaging;{

using OrderService.Api.Middlewares;    app.UseSwagger();

using OrderService.Core.Validators;    app.UseSwaggerUI();

using OrderService.Api.Observability;}



var builder = WebApplication.CreateBuilder(args);app.UseHttpsRedirection();



// Add observability (logging and tracing) - this should be firstvar summaries = new[]

builder.AddObservability();{

    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"

// Add configuration settings};

builder.Services.Configure<OrderServiceSettings>(

    builder.Configuration.GetSection(OrderServiceSettings.SectionName));app.MapGet("/weatherforecast", () =>

builder.Services.Configure<ApiSettings>({

    builder.Configuration.GetSection(ApiSettings.SectionName));    var forecast =  Enumerable.Range(1, 5).Select(index =>

builder.Services.Configure<JwtSettings>(        new WeatherForecast

    builder.Configuration.GetSection(JwtSettings.SectionName));        (

            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),

// Add services to the container.            Random.Shared.Next(-20, 55),

builder.Services.AddControllers();            summaries[Random.Shared.Next(summaries.Length)]

        ))

// Add rate limiting        .ToArray();

builder.Services.AddRateLimitingServices(builder.Configuration);    return forecast;

})

// Add FluentValidation.WithName("GetWeatherForecast")

builder.Services.AddValidatorsFromAssemblyContaining<CreateOrderDtoValidator>();.WithOpenApi();



builder.Services.AddEndpointsApiExplorer();app.Run();

builder.Services.AddSwaggerGen(options =>

{record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)

    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme{

    {    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        Name = "Authorization",}

        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Enter 'Bearer' [space] and then your valid token in the text input below.\n\nExample: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\""
    });

    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

// Add JWT Authentication
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? throw new InvalidOperationException("JWT Key not configured")))
        };
    });

// Add Authorization policies
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("CustomerOnly", policy => 
        policy.RequireClaim("roles", "customer"));
    
    options.AddPolicy("AdminOnly", policy => 
        policy.RequireClaim("roles", "admin"));
    
    options.AddPolicy("CustomerOrAdmin", policy => 
        policy.RequireAssertion(context =>
            context.User.HasClaim("roles", "customer") || 
            context.User.HasClaim("roles", "admin")));
});

// Add Entity Framework with PostgreSQL
builder.Services.AddDbContext<OrderDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register repositories and services
builder.Services.AddScoped<IOrderRepository, OrderRepository>();
builder.Services.AddScoped<IOrderService, OrderService.Core.Services.OrderService>();

// Register current user service for JWT authentication
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<ICurrentUserService, CurrentUserService>();

// Configure message broker settings
builder.Services.Configure<MessageBrokerSettings>(
    builder.Configuration.GetSection(MessageBrokerSettings.SectionName));

// Register HTTP message publisher for API (publishes via HTTP to message-broker-service)
builder.Services.AddHttpClient<IMessagePublisher, HttpMessagePublisher>();

Console.WriteLine("Starting Order Service API...");

var app = builder.Build();

// Configure the HTTP request pipeline.

// Add correlation ID middleware (before error handling)
app.UseCorrelationId();

// Add rate limiting (after correlation ID, before authentication)
app.UseOrderServiceRateLimiting(builder.Configuration);

// Add global error handling middleware
app.UseErrorHandling();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// Add Authentication and Authorization middleware
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
